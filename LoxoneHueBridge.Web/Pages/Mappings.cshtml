@page
@model LoxoneHueBridge.Web.Pages.MappingsModel
@{
    ViewData["Title"] = "Device Mappings";
}

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h4 class="mb-0">
                    <i class="fas fa-sitemap"></i> Loxone Extension/Device → Hue Light Mappings
                </h4>
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addMappingModal">
                    <i class="fas fa-plus"></i> Add Mapping
                </button>
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(Model.ErrorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        <i class="fas fa-exclamation-triangle"></i>
                        @Model.ErrorMessage
                    </div>
                }

                @if (!string.IsNullOrEmpty(Model.SuccessMessage))
                {
                    <div class="alert alert-success" role="alert">
                        <i class="fas fa-check-circle"></i>
                        @Model.SuccessMessage
                    </div>
                }

                @if (Model.Mappings?.Any() == true)
                {
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Extension Serial</th>
                                    <th>Device Serial</th>
                                    <th>Mapping Type</th>
                                    <th>Hue Target</th>
                                    <th>Target Type</th>
                                    <th>Description</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var mapping in Model.Mappings)
                                {
                                    <tr>
                                        <td>
                                            <span class="badge bg-primary">@mapping.ExtensionSerial</span>
                                        </td>
                                        <td>
                                            <span class="badge bg-secondary">@mapping.DeviceSerial</span>
                                        </td>
                                        <td>
                                            <span class="badge bg-info">@mapping.MappingType</span>
                                        </td>
                                        <td>@mapping.HueTargetId</td>
                                        <td>
                                            <span class="badge bg-secondary">@mapping.HueTargetType</span>
                                        </td>
                                        <td>@mapping.Description()</td>
                                        <td>
                                            @if (mapping.IsActive())
                                            {
                                                <span class="badge bg-success">Active</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-warning">Inactive</span>
                                            }
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm">
                                                <button type="button" class="btn btn-outline-primary btn-sm" 
                                                        onclick="editMapping('@mapping.ExtensionSerial', '@mapping.DeviceSerial')">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <form method="post" asp-page-handler="Delete" class="d-inline">
                                                    <input type="hidden" name="extensionSerial" value="@mapping.ExtensionSerial" />
                                                    <input type="hidden" name="deviceSerial" value="@mapping.DeviceSerial" />
                                                    <button type="submit" class="btn btn-outline-danger btn-sm" 
                                                            onclick="return confirm('Are you sure you want to delete this mapping?')">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </form>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-sitemap fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No Mappings Configured</h5>
                        <p class="text-muted">Create your first mapping to connect Loxone devices to Hue lights.</p>
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addMappingModal">
                            <i class="fas fa-plus"></i> Add First Mapping
                        </button>
                    </div>
                }
            </div>
        </div>

        @if (Model.ObservedLoxoneDevices?.Any() == true)
        {
            <div class="card mt-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-eye"></i> Recently Observed Loxone Devices
                    </h5>
                </div>
                <div class="card-body">
                    <p class="text-muted">These Loxone devices have been detected but are not yet mapped:</p>
                    <div class="row">
                        @foreach (var device in Model.ObservedLoxoneDevices.Where(d => Model.Mappings?.Any(m => m.ExtensionSerial == LoxoneHueBridge.Core.Helpers.HexFormatHelper.ToHexString(d.ExtensionSerial) && m.DeviceSerial == LoxoneHueBridge.Core.Helpers.HexFormatHelper.ToHexString(d.DeviceSerial)) != true))
                        {
                            <div class="col-md-4 mb-3">
                                <div class="card border-warning">
                                    <div class="card-body text-center">
                                        <i class="fas fa-microchip fa-2x text-warning mb-2"></i>
                                        <h6 class="card-title">@device.DeviceType</h6>
                                        <p class="card-text small">
                                            <strong>Extension:</strong> @LoxoneHueBridge.Core.Helpers.HexFormatHelper.ToHexString(device.ExtensionSerial)<br>
                                            <strong>Device:</strong> @LoxoneHueBridge.Core.Helpers.HexFormatHelper.ToHexString(device.DeviceSerial)<br>
                                            Last seen: @device.LastSeen.ToString("HH:mm:ss")<br>
                                            Command: @device.LastCommand
                                        </p>
                                        <button type="button" class="btn btn-sm btn-outline-primary" 
                                                onclick="quickMap('@LoxoneHueBridge.Core.Helpers.HexFormatHelper.ToHexString(device.ExtensionSerial)', '@LoxoneHueBridge.Core.Helpers.HexFormatHelper.ToHexString(device.DeviceSerial)')">
                                            <i class="fas fa-plus"></i> Quick Map
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Add Mapping Modal -->
<div class="modal fade" id="addMappingModal" tabindex="-1" aria-labelledby="addMappingModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form method="post" asp-page-handler="Add">
                <div class="modal-header">
                    <h5 class="modal-title" id="addMappingModalLabel">Add Loxone → Hue Mapping</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="natDeviceId" class="form-label">NAT Device ID</label>
                                <input type="number" class="form-control" id="natDeviceId" name="natDeviceId" 
                                       min="1" max="65535" required>
                                <div class="form-text">Legacy compatibility ID (1-65535)</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="extensionSerial" class="form-label">Extension Serial</label>
                                <input type="text" class="form-control" id="extensionSerial" name="extensionSerial" 
                                       placeholder="12:34:56:78" pattern="^[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}$" required>
                                <div class="form-text">Loxone extension serial (12:34:56:78 format)</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="deviceSerial" class="form-label">Device Serial</label>
                                <input type="text" class="form-control" id="deviceSerial" name="deviceSerial" 
                                       placeholder="12:34:56:79" pattern="^[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}$" required>
                                <div class="form-text">Loxone device serial (12:34:56:79 format)</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-12">
                            <div class="mb-3">
                                <label for="mappingType" class="form-label">Mapping Type</label>
                                <select class="form-select" id="mappingType" name="mappingType" required>
                                    <option value="">Select mapping type...</option>
                                    <option value="digital">Digital (On/Off)</option>
                                    <option value="analog">Analog (Brightness)</option>
                                    <option value="rgbw">RGBW (Color)</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="hueTargetType" class="form-label">Hue Target Type</label>
                                <select class="form-select" id="hueTargetType" name="hueTargetType" required onchange="loadHueTargets()">
                                    <option value="">Select target type...</option>
                                    <option value="light">Individual Light</option>
                                    <option value="group">Group/Room</option>
                                    <option value="scene">Scene</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="hueTargetId" class="form-label">Hue Target</label>
                                <select class="form-select" id="hueTargetId" name="hueTargetId" required>
                                    <option value="">Select target...</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="description" class="form-label">Description (Optional)</label>
                        <input type="text" class="form-control" id="description" name="description" 
                               placeholder="e.g., Living room main light">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Save Mapping
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Populate Hue targets based on selected type
        async function loadHueTargets() {
            const targetType = document.getElementById('hueTargetType').value;
            const targetSelect = document.getElementById('hueTargetId');
            
            // Clear existing options
            targetSelect.innerHTML = '<option value="">Loading...</option>';
            
            if (!targetType) {
                targetSelect.innerHTML = '<option value="">Select target...</option>';
                return;
            }
            
            try {
                const response = await fetch(`/api/hue/${targetType}s`);
                const targets = await response.json();
                
                targetSelect.innerHTML = '<option value="">Select target...</option>';
                
                targets.forEach(target => {
                    const option = document.createElement('option');
                    option.value = target.id;
                    option.textContent = `${target.name} (${target.id})`;
                    targetSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error loading targets:', error);
                targetSelect.innerHTML = '<option value="">Error loading targets</option>';
            }
        }
        
        // Quick mapping for observed devices
        function quickMap(extensionSerial, deviceSerial) {
            // Auto-generate NAT device ID from serials (for legacy compatibility)
            const extParts = extensionSerial.split(':').map(p => parseInt(p, 16));
            const devParts = deviceSerial.split(':').map(p => parseInt(p, 16));
            const natId = ((extParts[0] << 8) | extParts[1]) ^ ((devParts[2] << 8) | devParts[3]);
            
            document.getElementById('natDeviceId').value = Math.abs(natId % 65535) + 1;
            document.getElementById('extensionSerial').value = extensionSerial;
            document.getElementById('deviceSerial').value = deviceSerial;
            
            const modal = new bootstrap.Modal(document.getElementById('addMappingModal'));
            modal.show();
        }
        
        // Edit mapping (placeholder for future implementation)
        function editMapping(extensionSerial, deviceSerial) {
            alert('Edit functionality will be implemented in a future version.');
        }
        
        // Auto-refresh page every 30 seconds to show new observed devices
        setInterval(function() {
            // Only refresh if no modal is open
            if (!document.querySelector('.modal.show')) {
                window.location.reload();
            }
        }, 30000);
    </script>
}
